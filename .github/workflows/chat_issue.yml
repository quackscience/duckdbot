name: HugChat Issue Response
on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]

jobs:
  respond-to-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hugchat

      - name: Create HugChat CLI script
        run: |
          mkdir -p cookies
          cat > hugchat_cli.py << 'EOL'
          #!/usr/bin/env python3
          
          import argparse
          import os
          import sys
          from hugchat import hugchat
          from hugchat.login import Login
          
          def setup_argparse():
              parser = argparse.ArgumentParser(description='Interact with HugChat from command line')
              parser.add_argument('prompt', help='The prompt to send to HugChat')
              parser.add_argument('--email', help='HuggingFace email', 
                                default=os.environ.get('HUGCHAT_EMAIL'))
              parser.add_argument('--password', help='HuggingFace password',
                                default=os.environ.get('HUGCHAT_PASSWORD'))
              parser.add_argument('--cookie-dir', help='Cookie directory path',
                                default='./cookies/')
              parser.add_argument('--assistant-id', help='Assistant ID',
                                default='673e290837ec25016921608f')
              parser.add_argument('--web-search', action='store_true',
                                help='Enable web search')
              return parser
          
          def login_to_hugchat(email, password, cookie_dir):
              if not email or not password:
                  print("Error: Email and password are required. Set them via arguments or environment variables "
                        "HUGCHAT_EMAIL and HUGCHAT_PASSWORD")
                  sys.exit(1)
          
              try:
                  os.makedirs(cookie_dir, exist_ok=True)
                  sign = Login(email, password)
                  cookies = sign.login(cookie_dir_path=cookie_dir, save_cookies=True)
                  return cookies.get_dict()
              except Exception as e:
                  print(f"Error logging in: {str(e)}")
                  sys.exit(1)
          
          def main():
              parser = setup_argparse()
              args = parser.parse_args()
          
              cookies = login_to_hugchat(args.email, args.password, args.cookie_dir)
          
              try:
                  chatbot = hugchat.ChatBot(cookies=cookies)
                  chatbot.new_conversation(assistant=args.assistant_id, switch_to=True)
                  message_result = chatbot.chat(args.prompt, web_search=args.web_search)
                  response = message_result.wait_until_done()
                  print(response)
          
              except Exception as e:
                  print(f"Error during chat: {str(e)}")
                  sys.exit(1)
          
          if __name__ == "__main__":
              main()
          EOL
          chmod +x hugchat_cli.py

      - name: Get issue content and generate response
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HUGCHAT_EMAIL: ${{ secrets.HUGCHAT_EMAIL }}
          HUGCHAT_PASSWORD: ${{ secrets.HUGCHAT_PASSWORD }}
          ISSUE_BODY: ${{ github.event.comment.body || github.event.issue.body }}
        run: |
          # Generate response using HugChat
          RESPONSE=$(python hugchat_cli.py --web-search "$ISSUE_BODY")
          
          # Create a formatted comment with the response
          COMMENT="ðŸ‘‹ Hello! Here's a response from DuckDBot:

          ---
          $RESPONSE
          ---

          *Note: I am a bot powered by Huggingface. Please verify any information provided.*"
          
          # Post the comment to the issue
          gh issue comment ${{ github.event.issue.number }} --body "$COMMENT"
